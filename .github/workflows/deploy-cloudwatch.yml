
#Legacy manual deploy, uses terraform for deployment to eks

name: Deploy CloudWatch MCP to EKS
on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region to deploy to'
        type: string
        required: true
        default: us-east-1
      application:
        description: 'Application to deploy to'
        type: choice
        required: true
        default: jarvis-demo
        options:
          - jarvis
          - jarvis-demo
      version:
        description: 'CloudWatch MCP version to deploy'
        type: string
        required: false
        default: latest

permissions:
  id-token: write
  contents: read
jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Set IAM role to assume
        id: set-role
        run: |
          echo "role=${{ secrets.SAAS_AWS_DEPLOY_ROLE_ARN }}" >> $GITHUB_OUTPUT


      - name: Assume IAM role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.set-role.outputs.role }}
          role-session-name: deployment-role-session
          aws-region: ${{ inputs.region }}

      - name: Test AWS Connection
        run: aws sts get-caller-identity

  deploy-backend:
    name: Deploy CloudWatch MCP to EKS
    runs-on: ubuntu-latest
    needs: build_and_test
    env:
      SAAS_EKS_CLUSTER_NAME: ascending-s-api-cluster
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Set IAM role to assume
        id: set-role
        run: |
          echo "role=${{ secrets.SAAS_AWS_DEPLOY_ROLE_ARN }}" >> $GITHUB_OUTPUT


      - name: Assume IAM role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.set-role.outputs.role }}
          role-session-name: deployment-role-session
          aws-region: ${{ inputs.region }}

      - name: AWS ECR HELM Connection
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: "897729109735"

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.SAAS_EKS_CLUSTER_NAME }} --region ${{ inputs.region }}


      - name: Sync librechat env variables
        env:
          AWS_REGION: ${{ inputs.region }}
          APP_NAME: ${{ inputs.application }}
        run: |
          echo "Updating env vars in EKS pods..."
          kubectl annotate es jarvis-env force-sync=$(date +%s) --overwrite -n ${{ inputs.application }}

      - name: Apply service account with IRSA
        run: |
          # Apply service account with IAM role annotation for IRSA
          kubectl apply -f k8s/jarvis-demo/service-account.yaml

      - name: Apply deployment manifest
        run: |
          # Using env-auth deployment with IRSA (IAM Roles for Service Accounts)
          kubectl apply -f k8s/jarvis-demo/deployment-env-auth.yaml

          # Alternative deployments (uncomment as needed):
          # kubectl apply -f k8s/jarvis-demo/deployment-no-auth.yaml  # For testing without IRSA
          # kubectl apply -f k8s/jarvis-demo/deployment-oauth.yaml     # For per-user OAuth
          # kubectl apply -f k8s/jarvis-demo/deployment-browser-auth.yaml  # For browser auth

      - name: Update deployment on EKS
        env:
          image: ${{ steps.login-ecr.outputs.registry }}/jarvis/cloudwatch_mcp_server:${{ inputs.version }}
        run: kubectl set image deploy/cloudwatch-mcp cloudwatch-mcp=$image -n ${{ inputs.application }}


      - name: restart pods
        run: |
          kubectl rollout restart deploy/cloudwatch-mcp -n ${{ inputs.application }}

      - name: Check pod status
        run: |
          kubectl rollout status deploy/cloudwatch-mcp -n ${{ inputs.application }}
